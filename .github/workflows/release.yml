name: Build and Release

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            binary_name: hatui-linux
          - os: windows-latest
            platform: windows
            binary_name: hatui-windows.exe
          - os: macos-latest
            platform: macos
            binary_name: hatui-macos

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install aiohttp pyinstaller

    - name: Build with PyInstaller (Linux/macOS)
      if: matrix.platform != 'windows'
      run: |
        pyinstaller --onefile \
          --name=${{ matrix.binary_name }} \
          --add-data "styles:styles" \
          --hidden-import=asyncio \
          --hidden-import=aiohttp \
          --hidden-import=yaml \
          --hidden-import=dotenv \
          --console \
          main.py

    - name: Build with PyInstaller (Windows)
      if: matrix.platform == 'windows'
      run: |
        pyinstaller --onefile `
          --name=${{ matrix.binary_name }} `
          --add-data "styles;styles" `
          --hidden-import=asyncio `
          --hidden-import=aiohttp `
          --hidden-import=yaml `
          --hidden-import=dotenv `
          --console `
          main.py

    - name: Create release package
      shell: bash
      run: |
        mkdir -p release-${{ matrix.platform }}
        
        # Copy binary
        if [ "${{ matrix.platform }}" = "windows" ]; then
          cp dist/${{ matrix.binary_name }} release-${{ matrix.platform }}/
        else
          cp dist/${{ matrix.binary_name }} release-${{ matrix.platform }}/
          chmod +x release-${{ matrix.platform }}/${{ matrix.binary_name }}
        fi
        
        # Copy additional files
        cp example.env release-${{ matrix.platform }}/
        cp README.md release-${{ matrix.platform }}/
        cp LICENSE release-${{ matrix.platform }}/

    - name: Create archive (Linux/macOS)
      if: matrix.platform != 'windows'
      run: |
        cd release-${{ matrix.platform }}
        if [ "${{ github.event_name }}" = "release" ]; then
          tar -czf ../hatui-${{ matrix.platform }}-${{ github.ref_name }}.tar.gz *
        else
          tar -czf ../hatui-${{ matrix.platform }}-build.tar.gz *
        fi

    - name: Create archive (Windows)
      if: matrix.platform == 'windows'
      shell: pwsh
      run: |
        if ("${{ github.event_name }}" -eq "release") {
          Compress-Archive -Path "release-${{ matrix.platform }}/*" -DestinationPath "hatui-${{ matrix.platform }}-${{ github.ref_name }}.zip"
        } else {
          Compress-Archive -Path "release-${{ matrix.platform }}/*" -DestinationPath "hatui-${{ matrix.platform }}-build.zip"
        }

    - name: Upload to Release (Linux/macOS)
      if: matrix.platform != 'windows' && github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: ./hatui-${{ matrix.platform }}-${{ github.ref_name }}.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload to Release (Windows)
      if: matrix.platform == 'windows' && github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: ./hatui-${{ matrix.platform }}-${{ github.ref_name }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifacts (manual run)
      if: github.event_name == 'workflow_dispatch'
      uses: actions/upload-artifact@v4
      with:
        name: hatui-${{ matrix.platform }}-build
        path: ./hatui-${{ matrix.platform }}-build.*
        retention-days: 7
