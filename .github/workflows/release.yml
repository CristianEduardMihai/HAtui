name: Build and Release

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            binary_name: hatui-linux
          - os: windows-latest
            platform: windows
            binary_name: hatui-windows.exe
          - os: macos-latest
            platform: macos
            binary_name: hatui-macos

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install aiohttp pyinstaller

    - name: Build with PyInstaller (Linux/macOS)
      if: matrix.platform != 'windows'
      run: |
        pyinstaller --onefile \
          --name=${{ matrix.binary_name }} \
          --add-data "styles:styles" \
          --hidden-import=asyncio \
          --hidden-import=aiohttp \
          --hidden-import=yaml \
          --hidden-import=dotenv \
          --console \
          main.py

    - name: Build with PyInstaller (Windows)
      if: matrix.platform == 'windows'
      run: |
        pyinstaller --onefile `
          --name=${{ matrix.binary_name }} `
          --add-data "styles;styles" `
          --hidden-import=asyncio `
          --hidden-import=aiohttp `
          --hidden-import=yaml `
          --hidden-import=dotenv `
          --console `
          main.py

    - name: Create release package
      shell: bash
      run: |
        mkdir -p release-${{ matrix.platform }}
        
        # Copy binary
        if [ "${{ matrix.platform }}" = "windows" ]; then
          cp dist/${{ matrix.binary_name }} release-${{ matrix.platform }}/
        else
          cp dist/${{ matrix.binary_name }} release-${{ matrix.platform }}/
          chmod +x release-${{ matrix.platform }}/${{ matrix.binary_name }}
        fi
        
        # Copy additional files
        cp example.env release-${{ matrix.platform }}/
        cp README.md release-${{ matrix.platform }}/
        cp LICENSE release-${{ matrix.platform }}/
        
        # Create platform-specific README
        cat > release-${{ matrix.platform }}/INSTALL.md << 'EOF'
        # HAtui Installation Instructions
        
        ## Quick Start
        
        1. **Set up environment**:
           - Copy `example.env` to `.env`
           - Edit `.env` with your Home Assistant URL and access token
        
        2. **Get Home Assistant Token**:
           - Go to Home Assistant: Profile → Security → Long-lived access tokens
           - Click "Create Token", give it a name, copy the token
           - Paste it in your `.env` file as `HA_TOKEN=your_token_here`
        
        3. **Run HAtui**:
        EOF
        
        if [ "${{ matrix.platform }}" = "windows" ]; then
          echo "   - Double-click \`${{ matrix.binary_name }}\` or run from command prompt" >> release-${{ matrix.platform }}/INSTALL.md
        else
          echo "   - Run \`./${{ matrix.binary_name }}\` from terminal" >> release-${{ matrix.platform }}/INSTALL.md
        fi
        
        cat >> release-${{ matrix.platform }}/INSTALL.md << 'EOF'
        
        ## Controls
        
        - **Navigation**: Arrow keys (↑↓←→)
        - **Toggle entities**: Space
        - **Brightness control**: Ctrl+↑↓ (for lights)
        - **Dashboard switching**: Ctrl+←→
        - **Edit mode**: Press 'e'
        - **Dashboard management**: Press 'd' (in edit mode)
        - **Refresh**: Press 'r'
        - **Quit**: Press 'q'
        
        ## First Run
        
        On first run, HAtui will create a default `config.yaml` with a sample dashboard.
        You can edit this file or use the built-in editor (press 'e' then 'a' to add entities).
        EOF

    - name: Create archive (Linux/macOS)
      if: matrix.platform != 'windows'
      run: |
        cd release-${{ matrix.platform }}
        tar -czf ../hatui-${{ matrix.platform }}-${{ github.ref_name }}.tar.gz *

    - name: Create archive (Windows)
      if: matrix.platform == 'windows'
      shell: pwsh
      run: |
        Compress-Archive -Path "release-${{ matrix.platform }}/*" -DestinationPath "hatui-${{ matrix.platform }}-${{ github.ref_name }}.zip"

    - name: Upload to Release (Linux/macOS)
      if: matrix.platform != 'windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./hatui-${{ matrix.platform }}-${{ github.ref_name }}.tar.gz
        asset_name: hatui-${{ matrix.platform }}-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload to Release (Windows)
      if: matrix.platform == 'windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./hatui-${{ matrix.platform }}-${{ github.ref_name }}.zip
        asset_name: hatui-${{ matrix.platform }}-${{ github.ref_name }}.zip
        asset_content_type: application/zip

    - name: Upload standalone binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/${{ matrix.binary_name }}
        asset_name: ${{ matrix.binary_name }}
        asset_content_type: application/octet-stream
